{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","Content","iconsList","Object","entries","Icons","iconBoxCss","name","styles","Root","styled_base_browser_esm","layout","target","mainCss","Title","App","_useState","useState","_useState2","slicedToArray","value","setValue","handleOnChangeInput","useCallback","e","data","useMemo","filter","_ref","toLowerCase","search","slice","core_browser_esm","css","input","type","prefix","icon","size","onChange","map","_ref3","_ref4","Icon","card","key","style","textAlign","hoverable","cover","paddingTop","Meta","title","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAOQA,aAAQC,cAEVC,EAAYC,OAAOC,QAAQC,GAE3BC,EAAU,CAAAC,KAAA,SAAAC,OAAA,6GASVC,EAAON,OAAAO,EAAA,EAAAP,CAAAQ,EAAA,GAAAC,OAAA,YAAAT,CAAH,CAAAI,KAAA,SAAAC,OAAA,sBAIJK,EAAO,CAAAN,KAAA,SAAAC,OAAA,+DAOPM,EAAKX,OAAAO,EAAA,EAAAP,CAAA,MAAAS,OAAA,YAAAT,CAAA,CAAAI,KAAA,SAAAC,OAAA,yCAqCIO,EA/BO,WAAM,IAAAC,EACAC,mBAAS,IADTC,EAAAf,OAAAgB,EAAA,EAAAhB,CAAAa,EAAA,GACnBI,EADmBF,EAAA,GACZG,EADYH,EAAA,GAGpBI,EAAsBC,sBAAY,SAACC,GACvCH,EAASG,EAAEZ,OAAOQ,QACjB,CAACC,IAEEI,EAAOC,kBAAQ,WACnB,OAAIN,EAGGlB,EAAUyB,OAAO,SAAAC,GAAA,OAAgE,IAAhEzB,OAAAgB,EAAA,EAAAhB,CAAAyB,EAAA,MAAiBC,cAAcC,OAAOV,EAAMS,iBAAuBE,MAAM,EAAG,IAF3F,IAGR,CAACX,IAEJ,OACEjB,OAAA6B,EAAA,EAAA7B,CAACM,EAAD,KACEN,OAAA6B,EAAA,EAAA7B,CAACH,EAAD,KAAQG,OAAA6B,EAAA,EAAA7B,CAACW,EAAD,4BACRX,OAAA6B,EAAA,EAAA7B,CAACF,EAAD,CAASgC,IAAKpB,GACZV,OAAA6B,EAAA,EAAA7B,CAAA+B,EAAA,GAAOC,KAAK,SAASC,OAAQjC,OAAA6B,EAAA,EAAA7B,CAAAkC,EAAA,GAAMF,KAAK,WAAaG,KAAK,QAAQC,SAAUjB,IAC5EnB,OAAA6B,EAAA,EAAA7B,CAAA,OAAK8B,IAAK3B,GACPmB,EAAKe,IAAI,SAAAC,GAAA,IAAAC,EAAAvC,OAAAgB,EAAA,EAAAhB,CAAAsC,EAAA,GAAElC,EAAFmC,EAAA,GAAQC,EAARD,EAAA,UACRvC,OAAA6B,EAAA,EAAA7B,CAAAyC,EAAA,GAAMC,IAAKtC,EAAMuC,MAAO,CAACC,UAAW,UAAWC,WAAS,EAACV,KAAK,QAAQW,MAAO9C,OAAA6B,EAAA,EAAA7B,CAAA,OAAK2C,MAAO,CAACI,WAAY,SAAS/C,OAAA6B,EAAA,EAAA7B,CAACwC,EAAD,CAAML,KAAM,OACzHnC,OAAA6B,EAAA,EAAA7B,CAAAyC,EAAA,EAAMO,KAAN,CAAWC,MAAO7C,WC/CZ8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,OAAA6B,EAAA,EAAA7B,CAACyD,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.343e4807.chunk.js","sourcesContent":["import { css } from '@emotion/core';\nimport styled from '@emotion/styled';\nimport React, { useState, useCallback, useMemo } from 'react';\nimport './App.css';\nimport * as Icons from \"react-icons/all\";\nimport { Input, Icon, Card, Layout } from 'antd';\n\nconst { Header, Content } = Layout;\n\nconst iconsList = Object.entries(Icons);\n\nconst iconBoxCss = css`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 150px);\n  gap: 20px;\n  justify-content: center;\n\n  padding: 10px 0;\n`;\n\nconst Root = styled(Layout)`\n  min-height: 100vh;\n`;\n\nconst mainCss = css`\n  max-width: 835px;\n  width: 100%;\n  margin: 20px auto;\n  padding: 0 50px;\n`\n\nconst Title = styled.h1`\n  display: inline;\n  color: white;\n  margin: 0;\n`\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState('');\n\n  const handleOnChangeInput = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value)\n  }, [setValue])\n\n  const data = useMemo(() => {\n    if(!value) {\n      return []\n    }\n    return iconsList.filter(([name]) => name.toLowerCase().search(value.toLowerCase()) !== -1).slice(0, 30)\n  }, [value])\n\n  return (\n    <Root>\n      <Header><Title>react-icons-search</Title></Header>\n      <Content css={mainCss}>\n        <Input type=\"search\" prefix={<Icon type=\"search\" />} size=\"large\" onChange={handleOnChangeInput} />\n        <div css={iconBoxCss}>\n          {data.map(([name, Icon]) => (\n            <Card key={name} style={{textAlign: 'center'}} hoverable size=\"small\" cover={<div style={{paddingTop: '10px'}}><Icon size={50} /></div>}>\n              <Card.Meta title={name} />\n            </Card>\n          ))}\n        </div>\n      </Content>\n    </Root>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}